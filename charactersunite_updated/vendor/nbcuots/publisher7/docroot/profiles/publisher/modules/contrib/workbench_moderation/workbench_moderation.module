<?php

/**
 * @file workbench_moderation.module
 */

/**
 * Implements hook_views_api().
 */
function workbench_moderation_views_api() {
  // @todo, Should this be 3.0?
  return array('api' => 2.0);
}

/**
 * Implements hook_menu().
 */
function workbench_moderation_menu() {
  $items = array();

  // View the current draft of a node.
  $items["node/%node/draft"] = array(
    'title' => 'View draft',
    'page callback' => 'workbench_moderation_node_view_draft',
    'page arguments' => array(1),
    'access callback' => '_workbench_moderation_access_current_draft',
    'access arguments' => array(1),
    'file' => 'workbench_moderation.node.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -9,
  );

  return $items;
}

/**
 * Checks if the user can view the current node revision.
 *
 * This is the access callback for node/%node/draft as defined in
 * workbench_moderation_menu().
 *
 * @param $node
 *   The node being acted upon.
 *
 * @return
 *   Booelan TRUE or FALSE.
 */
function _workbench_moderation_access_current_draft($node) {

  $active_id = state_flow_entity_get_active_revision_id($node, 'node');
  // @todo, Add test for when active_id is empty. This occurs when a node is
  // created before this module is created.
  if(empty($active_id) || $active_id == $node->vid){
    return FALSE;
  }

  return state_flow_menu_node_access($node);
}

/**
 * Implements hook_menu_alter().
 */
function workbench_moderation_menu_alter(&$items) {

  // hide Workflow tab provided by State Flow
  $items['node/%node/workflow']['access callback'] = FALSE;

  // Redirect node/%node/revisions
  $items['node/%node/revisions']['page callback'] = 'workbench_moderation_node_revisions_redirect';
  $items['node/%node/revisions']['page arguments'] = array(1);
  $items['node/%node/revisions']['type'] = MENU_NORMAL_ITEM;


  // Override the node revision view callback.
  $items['node/%node/revisions/%/view']['page callback'] = 'workbench_moderation_node_view_revision';
  $items['node/%node/revisions/%/view']['file path'] = drupal_get_path('module', 'workbench_moderation');
  $items['node/%node/revisions/%/view']['file'] = 'workbench_moderation.node.inc';
  $items['node/%node/revisions/%/view']['access callback'] = 'state_flow_menu_node_access';

  // Redirect node/%node/workflow
  if (!empty($items['node/%node/workflow']) && $items['node/%node/workflow']['module'] === 'state_flow') {
    // @todo, Uncomment this when the moderation tab is ready.
    // $items['node/%node/workflow']['page callback'] = 'workbench_moderation_node_revisions_redirect';
    // $items['node/%node/workflow']['page arguments'] = array(1);
    // $items['node/%node/workflow']['type'] = MENU_NORMAL_ITEM;
  }

  /**
   * @todo, revisit these alters from version 1.x
  // For revert and delete operations, use our own access check.
  $items['node/%node/revisions/%/revert']['access callback'] = '_workbench_moderation_revision_access';
  $items['node/%node/revisions/%/delete']['access callback'] = '_workbench_moderation_revision_access';

  // Provide a container administration menu item, if one doesn't already exist.
  if (!isset($items['admin/config/workbench'])) {
    $items['admin/config/workbench'] = array(
      'title' => 'Workbench',
      'description' => 'Workbench',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('administer site configuration'),
      'position' => 'right',
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
    );
  }
   *
   *
   */
}

/**
 * Implements hook_permission().
 *
 * Provides permissions for each state to state change.
 */
function workbench_moderation_permission() {
  $permissions = array();
  // @todo which perms do we need in 2.x
  /*
  $permissions['administer workbench moderation'] = array(
    'title' => t('Administer Workbench Moderation'),
  );
  $permissions['view moderation history'] = array(
    'title' => t('View moderation history'),
  );
  $permissions['view moderation messages'] = array(
    'title' => t('View the moderation messages on a node')
  );*/

  $permissions['view all unpublished content'] = array(
    'title' => t('View all unpublished content'),
  );
  $permissions['bypass workbench moderation'] = array(
    'title' => t('Bypass moderation restrictions'),
    'restrict access' => TRUE,
  );
  $permissions['use workbench_moderation my drafts tab'] = array(
    'title' => t('Use "My Drafts" workbench tab')
  );
  $permissions['use workbench_moderation needs review tab'] = array(
    'title' => t('Use "Needs Review" workbench tab')
  );

  return $permissions;
}

/**
 * Implements hook_node_access().
 *
 * Allows users with the 'view all unpublished content' permission to do so.
 */
function workbench_moderation_node_access($node, $op, $account) {
  if ($op == 'view' && !$node->status && user_access('view all unpublished content', $account)) {
    return NODE_ACCESS_ALLOW;
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function workbench_moderation_form_node_form_alter(&$form, &$form_state, $form_id) {


  if (!empty($form['revision_information']['state_flow'])) {

    // Hide Published checkbox
    $form['options']['status']['#access'] = FALSE;

    // enforce new revision
    $form['revision_information']['revision']['#value'] = TRUE;

    // Allow access to revision info.
    $form['revision_information']['#access'] = TRUE;

    // info block messages
    $node = $form_state['node'];
    workbench_moderation_messages('edit', $node);

    // Add the javascript for vertical tabs.
    drupal_add_js(drupal_get_path('module', 'workbench_moderation') . '/js/workbench_moderation.js', array('weight' => 90));

    // Change the title of core options from "Publishing Options" to "Additional
    // Options because the event the publish checkbox is hidden.
    if (!empty($form['options']['#title'])) {
      $form['options']['#title'] = t('Additional options');
    }
  }
}

/**
 * Redirects 'node/%node/revisions' to node/%node/moderation
 *
 * workbench_moderation_menu_alter() changes the page callback
 * for 'node/%node/revisions' to this function
 *
 * @param $node
 *   The node being acted upon.
 */
function workbench_moderation_node_revisions_redirect($node) {

  drupal_goto('node/' . $node->nid . '/moderation');

  /**
   * @todo Revisit this additional logic from version 1.x
  // Redirect node types subject to moderation.
  if (workbench_moderation_node_type_moderated($node->type) === TRUE) {
    drupal_goto('node/' . $node->nid . '/moderation');
  }
  // Return the normal node revisions page for unmoderated types.
  else {

    if (module_exists('diff')) {
      return diff_diffs_overview($node);
    }
    else {
      return node_revision_overview($node);
    }
  }
   *
   */
}

/**
 * Implements hook_node_view().
 *
 * Display messages about the node's moderation state.
 */
function workbench_moderation_node_view($node, $view_mode = 'full') {

  // Show moderation state messages if we're on a node page.
  if (node_is_page($node) && $view_mode == 'full' && empty($node->in_preview)) {
    workbench_moderation_messages('view', $node);
  }
}

/**
 * Implements hook_block_view_workbench_block().
 *
 * Show the editorial status of this node.
 */
function workbench_moderation_workbench_block() {

  $output = array();
  foreach (workbench_moderation_set_message() as $message) {
    $output[] = t('!label: <em>!message</em>', array('!label' => $message['label'], '!message' => $message['message']));
  }

  return $output;
}

/**
 * Stores status messages for delivery.
 *
 * This function stores up moderation messages to be passed on to workbench_moderation_workbench_block().
 *
 * This function uses a static variable so that function can be called more than
 * once and the array built up.
 *
 * @see workbench_moderation_workbench_block()
 * @see workbench_moderation_messages()
 *
 * @param $new_messages
 *   An array of messages to be added to the block.
 *
 * @return
 *   An array of messages to be added to the block.
 */
function workbench_moderation_set_message($new_messages = array()) {
  static $messages = array();
  $messages = array_merge($messages, $new_messages);
  return $messages;
}

/**
 * Sets status messages for a node.
 *
 * Note that these status messages aren't relevant to the session, only the
 * current page view.
 *
 * @see workbench_moderation_set_message()
 *
 * @param $context
 *   A string, either 'view' or 'edit'.
 * @param $node
 *   A node object. The current menu object will be used if it is a node and
 *   this variable was not set.
 */
function workbench_moderation_messages($context, $node = NULL) {

  $info_block_messages = array();

  global $user;
  if (!user_access('view moderation messages')
      || (!$node && !($node = menu_get_object()))) {
    return;
  }

  if ($state_machine = state_flow_entity_load_state_machine($node, 'node') && !empty($node->current_state)) {

    $info_block_messages[] = array(
      'label' => t('Revision state'),
      'message' => check_plain(workbench_workflows_load_label('states', $node->current_state)),
    );

    $any_published_vid = !empty($node->published_revision_id);
    $published = $any_published_vid && $node->published_revision_id == $node->vid && $node->status == '1';


    $info_block_messages[] = array(
      'label' => t('Public'),
      'message' => $published ? t('Yes') : t('No'),
    );

    // If there is a published vid, that's something else, create a link.
    if ($any_published_vid && !$published) {
      $info_block_messages[] = array(
      'label' => t('Public revision'),
      'message' => l('Public version', 'node/' . $node->nid),
      );
    }

    if (!$published) {
      $info_block_messages[] = array(
        'label' => t('Moderate'),
        'message' =>  l(t('Change state'), 'node/' . $node->nid . '/revisions-state-flow-states'),
      );
    }

    // Send the info block array to a static variable.
    workbench_moderation_set_message($info_block_messages);
  }
}

/**
 * Implements hook_state_flow_menu_node_access_alter().
 */
function workbench_moderation_state_flow_menu_node_access_alter(&$access, $node, $account) {
  // Simplify state flow access down to match node edit access.
  $access = node_access('update', $node, $account);
}

/**
 * Prepare variables for the state_flow_history_entity template.
 */
function workbench_moderation_preprocess_state_flow_history_entity(&$variables) {

  $states = workbench_workflows_options('states');

  // Rewrite state machine names into labels.
  if (!empty($variables['state']) && array_key_exists($variables['state'], $states)) {
    $variables['state'] = $states[$variables['state']];
  }
  if (!empty($variables['from_state']) && array_key_exists($variables['from_state'], $states)) {
    $variables['from_state'] = $states[$variables['from_state']];
  }
}
