<?php

/**
 * @file
 * An implementation of node revision workflow for Drupal based on the
 * State Machine system.
 */

/**
 * Implements hook_menu().
 */
function state_flow_menu() {
  $items = array();
  $items['node/%node/workflow'] = array(
    'title' => 'Workflow',
    'description' => 'Information about the workflow status of this content',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'state_flow_events',
    'page arguments' => array(1),
    'access callback' => 'state_flow_menu_node_access',
    'access arguments' => array(1),
    'weight' => 10,
    'file' => 'state_flow.pages.inc',
  );
  $items['node/%node/revisions/%/edit'] = array(
    'title' => 'Edit an earlier revision',
    'load arguments' => array(3),
    'page callback' => 'node_page_edit',
    'page arguments' => array(1, TRUE),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
  );
  $items['node/%node/revisions/%/workflow'] = array(
    'title' => 'Transition a revision to a new workflow state',
    'load arguments' => array(3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('state_flow_entity_events_revision', 1, 'node', 5, array()),
    'access callback' => 'state_flow_events_revisions_access',
    'access arguments' => array(1, 5),
    'file' => 'state_flow_entity.forms.inc',
    'file path' => drupal_get_path('module', 'state_flow_entity'),
  );
  $items['admin/content/content-revisions'] = array(
    'title' => 'Content Revisions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('state_flow_content_page'),
    'access arguments' => array('administer content revisions'),
    'type' => MENU_NORMAL_ITEM | MENU_LOCAL_TASK,
    'file' => 'state_flow.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function state_flow_menu_alter(&$items) {
  // Hijack the node/X/edit page to ensure that the right revision  is displayed
  $items['node/%node/edit']['page callback'] = 'state_flow_node_edit_page_override';
  $items['node/%node/edit']['title'] = t('Edit Draft');
}

/**
 * Overrides the node/%/edit page to ensure the proper revision is shown.
 *
 * @param $node
 *   The node being acted upon.
 * @return
 *   A node editing form.
 */
function state_flow_node_edit_page_override($node) {
  // Check to see if this is an existing node
  if (isset($node->nid)) {
    // Load the node moderation data
    $machine = state_flow_entity_load_state_machine($node, 'node');
    $active_revision_id = $machine->get_active_revision();
    if (!empty($active_revision_id)) {
      // We ONLY edit the active revision
      $node = node_load($node->nid, $machine->object->active_revision_id);
    }
  }
  // Ensure we have the editing code.
  module_load_include('inc', 'node', 'node.pages');
  return node_page_edit($node);
}

/**
 * Implements hook_permission().
 */
function state_flow_permission() {
  return array(
    'manage content workflow' => array(
      'title' => t('Manage content workflow'),
      'description' => t('Manage the content workflow pages and operations.'),
    ),
    'administer content revisions' => array(
      'title' => t('Administer content revisions'),
    ),
  );
}

/**
 * Implements hook_admin_paths().
 */
function state_flow_admin_paths() {
  if (variable_get('node_admin_theme')) {
    $paths = array(
      'node/*/workflow' => TRUE,
      'node/*/revisions/*/edit' => TRUE,
      'node/*/revisions/*/workflow' => TRUE,
      'node/*/revisions/*/workflow/*' => TRUE,
      'node/*/state-flow-history' => TRUE,
      'node/*/revisions-state-flow-states' => TRUE,
    );
    return $paths;
  }
}


/**
 * Implements hook_entity_property_info_alter().
 *
 * Adds a "state" property on nodes that are configured with state flow.
 *
 * @see entity_api module.
 *
 * @todo, this should move to state_flow_entity, probably
 */
function state_flow_entity_property_info_alter(&$info) {
  if (!empty($info['node']['bundles'])) {
    foreach ($info['node']['bundles'] as $entity_type => $entity_info) {
      if (variable_get('state_flow_' . $entity_type, '')) {
        $info['node']['bundles'][$entity_type]['properties']['state'] = array(
          'label' => t('Workflow state'),
          'description' => t('The current workflow state for this node revision.'),
          'getter callback' => 'state_flow_entity_get_state',
        );
      }
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function state_flow_entity_info_alter(&$entity_info) {

  // Add state_flow_information to the node entity type.
  if (!empty($entity_info['node'])) {
    $entity_info['node']['state_flow_entity'] = array(
      // @todo, there will likely be more properties needed here.
      'revision_workflow_path' => 'node/%entity_id/revisions/%revision_id/workflow',
      'revision_delete_path' => 'node/%entity_id/revisions/%revision_id/delete',
      'revision_edit_path' => 'node/%entity_id/revisions/%revision_id/edit',
    );
  }
}

/**
 * Implements hook_state_flow_entity_plugins().
 */
function state_flow_state_flow_entity_plugins() {
  $info = array();
  $path = drupal_get_path('module', 'state_flow') . '/plugins';

  $workflow_options = array(
    'states' => array(
      'draft' => array('label' => t('Draft')),
      'published' => array(
        'label' => t('Published'),
        'on_enter' => 'on_enter_published',
        'on_exit' => 'on_exit_published',
      ),
      'unpublished' => array(
        'label' => t('Unpublished'),
       'on_enter' => 'on_enter_unpublished',
      ),
    ),
    'events' => array(
      'keep in draft' => array(
        'label' => t('Keep in Draft'),
        'origin' => 'draft',
        'target' => 'draft',
      ),
      'publish' => array(
        'label' => t('Publish'),
        'origin' => array('draft', 'published'),
        'target' => 'published',
      ),
      'unpublish' => array(
        'label' => t('Unpublish'),
        'origin' => array('draft', 'published'),
        'target' => 'unpublished',
        'permission' => 'publish and unpublish content',
      ),
      'to draft' => array(
        'label' => t('To Draft'),
        'origin' => array('unpublished', 'published'),
        'target' => 'draft',
      ),
    ),
  );

  $info['state_flow_node'] = array(
    'handler' => array(
      'class' => 'StateFlowNode',
      'file' => 'state_flow_node.inc',
      'path' => drupal_get_path('module', 'state_flow') . '/plugins',
      'parent' => 'state_flow_entity',
      'workflow_options' => $workflow_options,
      'entity_type' => 'node',
      'event_form_options' => array(), // see state_flow.forms.inc for details
    ),
  );
  return $info;
}

/**
 * Implements hook_views_api().
 */
function state_flow_views_api() {


  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'state_flow') . '/includes/views',
  );
}

/**
 * Implements hook_node_revision_delete().
 */
function state_flow_node_revision_delete($node) {

  // delete history and update active revision for this entity
  $machine = state_flow_entity_load_state_machine($node, 'node');
  $machine->delete_state_flow_revision($node->vid, 'node');
}

/**
 * Menu access callback for accessing the node workflow pages.
 */
function state_flow_menu_node_access($node, $account = NULL) {
  global $user;

  // If no user account is given, then use the current user.
  if (empty($account)) {
    $account = $user;
  }

  // If the user has the "manage content workflow" permission, then allow access
  // to workflow pages.
  $has_access = user_access('manage content workflow', $account);

  //check to see if node type is ignored
  $is_ignored = state_flow_entity_load_state_machine($node, 'node')->ignore();

  if ($has_access && !$is_ignored) {
    $access = TRUE;
  }
  else {
    $access = FALSE;
  }

  // Allow other modules to alter this decision
  drupal_alter('state_flow_menu_node_access', $access, $node, $account);

  return $access;
}

/**
 * Menu access callback for the node revision workflow transition page.
 */
function state_flow_events_revisions_access($node, $event_name = NULL) {
  return !empty($event_name) ? state_flow_access($node, $event_name) : state_flow_menu_node_access($node);
}

/**
 * Determine whether a user has permission to transition a node with an event.
 */
function state_flow_access($node, $event_name, $account = NULL) {
  global $user;

  // If no user account is given, then use the current user.
  if (empty($account)) {
    $account = $user;
  }

  // If the user cannot edit the node, then deny access to any events.
  if (!state_flow_menu_node_access($node, $account)) {
    return FALSE;
  }

  // Load the state machine for the node and test whether the event is allowed.
  $machine = state_flow_entity_load_state_machine($node, 'node');
  $state_event = $machine ? $machine->get_event($event_name) : FALSE;

  return $state_event ? $state_event->validate() : FALSE;
}

/**
 * Getter callback for the "state" property on node bundles using workflow.
 *
 * @see entity_api module.
 */
function state_flow_entity_get_state($data, $options, $name, $type, $info) {
  $machine = state_flow_entity_load_state_machine($data, 'node');
  return $machine->get_current_state();
}

/**
 * Get all of the states for all content types
 */
function state_flow_get_all_states() {
  static $states = array();

  if (empty($states)) {
    $i = 0;
    foreach (node_type_get_types() as $type_key => $type) {
      // Fake a node object
      $node = new stdClass();
      $node->vid = $i;
      $i++;
      $node->type = $type_key;
      $machine = state_flow_entity_load_state_machine($node, 'node');
      $states += $machine->get_states_options();
    }
  }

  return $states;
}

/**
 * Get all of the events for all content types
 *
 * @todo, this will not play well at all with having more than one workflow available.
 */
function state_flow_get_all_events() {
  static $events = array();

  if (empty($events)) {
    $i = 0;
    foreach (node_type_get_types() as $type_key => $type) {
      // Fake a node object
      $node = new stdClass();
      $node->vid = $i;
      $i++;
      $node->type = $type_key;
      $machine = state_flow_entity_load_state_machine($node, 'node');
      $events += array_keys($machine->get_all_events());
    }
  }

  return $events;
}

/**
 * Retrieve the states history for an entity.
 *
 * @param integer node id
 * @return array of objects
 */
function state_flow_get_all_history($entity_id) {
  $history = db_query('
    SELECT sfh.*, u.uid, u.name AS user_name
    FROM {state_flow_history} sfh
    LEFT JOIN {users} u ON u.uid = sfh.uid
    WHERE sfh.entity_id = :entity_id
    ORDER BY sfh.timestamp DESC',
          // Add entity_type where
    array(
      ':entity_id' => $entity_id
    ))->fetchAll();
  return $history;
}


/**
 * Implements hook_node_revision_filters()
 */
function state_flow_node_revision_filters() {
  $filters = array();
  $states = state_flow_get_all_states();
  $options = array_combine(array_keys($states), array_keys($states));
  array_unshift($options, '[any]');
  $filters['state'] = array(
    'form' => array(
      '#type' => 'select',
      '#title' => t('State'),
      '#options' => $options,
    ),
  );

  return $filters;
}

/**
 * Implements hook_query_node_revision_alter()
 */
function state_flow_query_node_revision_alter(QueryAlterableInterface $query) {
  // Get the filter form the session
  $filters = $query->getMetaData('filters');
  if ($filter = isset($filters['state']) ? $filters['state'] : NULL) {
    // @todo, update this table name.
    $query->join('node_revision_states', 'nrs', 'nr.vid = nrs.vid');
    $query->condition('nrs.state', $filter);
  }
}

/**
 * Implements hook_node_revision_operations().
 */
function state_flow_node_revision_operations() {
  $operations = array();

  $events = state_flow_get_all_events();

  foreach ($events as $event) {
    $operations["change_state_$event"] = array(
      'label' => t('Transition Action: @event', array('@event' => $event)),
      'callback' => 'state_flow_node_revision_operation_change_state',
      'callback arguments' => array('args' => array('event' => $event)),
    );
  }

  return $operations;
}

/**
 * Operation callback to change state of a node
 */
function state_flow_node_revision_operation_change_state($nodes, $args) {
  $event = $args['event'];

  // We use batch processing to prevent timeout when updating a large number
  // of nodes.
  if (count($nodes) > 10) {
    $batch = array(
      'operations' => array(
        array('state_flow_node_revision_operation_change_state_batch_process', array($nodes, $args))
      ),
      'finished' => 'state_flow_node_revision_operation_change_state_batch_finished',
      'title' => t('Processing'),
      // We use a single multi-pass operation, so the default
      // 'Remaining x of y operations' message will be confusing here.
      'progress_message' => '',
      'error_message' => t('The update has encountered an error.'),
    );
    batch_set($batch);
  }
  else {
    $message = array();
    foreach ($nodes as $info) {
      $messages[] = state_flow_operation_change_helper($info, $event);
    }
    $message = theme('item_list', array('items' => $messages));
    $message = format_plural(count($nodes), '1 item successfully processed:', '@count items successfully processed:');
    drupal_set_message($message);
  }

}

function state_flow_operation_change_helper($info, $event) {
  global $user;

  $node = node_load($info['nid'], $info['vid']);
  $machine = state_flow_entity_load_state_machine($node, 'node');
  $allowed_events = $machine->get_available_events();
  if (in_array($event, $allowed_events)) {
    $machine->fire_event($event, $user->uid, 'State changed via Bulk Node Operation');
    return t('@title has been transitioned to @state', array('@title' => $node->title, '@state' => $state_machine->get_label_for_current_state()));
  }
}

/**
 * State Change Mass Update Batch operation
 */
function state_flow_node_revision_operation_change_state_batch_process($nodes, $updates, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = count($nodes);
    $context['sandbox']['nodes'] = $nodes;
  }

  // Process nodes by groups of 5.
  $count = min(5, count($context['sandbox']['nodes']));
  for ($i = 1; $i <= $count; $i++) {
    // For each nid, load the node, reset the values, and save it.
    $info = array_shift($context['sandbox']['nodes']);

    // Store result for post-processing in the finished callback.
    $context['results'][] = state_flow_operation_change_helper($info, $updates);

    // Update our progress information.
    $context['sandbox']['progress']++;
  }

  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Node Mass Update Batch 'finished' callback.
 */
function state_flow_node_revision_operation_change_state_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('The update has been performed.'));
  }
  else {
    drupal_set_message(t('An error occurred and processing did not complete.'), 'error');
    $message = format_plural(count($results), '1 item successfully processed:', '@count items successfully processed:');
    $message .= theme('item_list', array('items' => $results));
    drupal_set_message($message);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function state_flow_form_node_form_alter(&$form, &$form_state, $form_id) {

  // Add the event form.
  // @todo, should this be added to all node forms? Should that be a setting
  // in the state flow plugin.
  // @todo, review permissions for embedding this form.
  $node = $form_state['node'];
  $machine = state_flow_entity_load_state_machine($node, 'node');

  // Only alter the form if this entity has a state machine and is not ignored.
  if (!empty($machine) && !$machine->ignore()) {
    module_load_include('inc', 'state_flow_entity', 'state_flow_entity.forms');
    $form['options']['state_flow']['#type'] = 'fieldset';

    // Use a select list.
    $form_options = array(
      'event_element_type' => 'select',
    );

    $form['options']['state_flow'] +=  _state_flow_entity_events_revision(array(), $form_state, $node, 'node', NULL, $form_options);

    // remove node revision log field
    $form['revision_information']['log']['#access'] = FALSE;

    // Hide Published checkbox
    $form['options']['status']['#access'] = FALSE;
  }
}

/**
 * Implements hook_node_validate().
 */
function state_flow_node_validate($node, $form, &$form_state) {
  if (!empty($form_state['values']['state_flow'])) {
    // Validate fields.
    $machine = $form_state['values']['state_flow'];
    $machine->history_entity_form_field_validate($form, $form_state);
    // Validate event value.
    $event = $machine->get_event($form_state['values']['event']);
    if (!is_object($event) || !method_exists($event, 'get_options')) {
      form_set_error('event', t('@title value is invalid.', array('@title' => $form['options']['state_flow']['event']['#title'])));
    }
  }
}

/**
 * Implements hook_node_submit().
 */
function state_flow_node_submit($node, $form, &$form_state) {

  if (!empty($form_state['values']['state_flow'])) {
    // Find out if this event's target state's on_enter callback will publish this node.
    // If so, set the status to 1.
    $machine = $form_state['values']['state_flow'];
    $event = $machine->get_event($form_state['values']['event']);
    if (!is_object($event) || !method_exists($event, 'get_options')) {
      watchdog('state_flow', 'Invalid event value "@value" submitted in node form.', array('@value' => $form_state['values']['event']), WATCHDOG_ERROR);
      return;
    }
    $event_options = $event->get_options();
    $state_options = $machine->get_states_options();
    if (!empty($state_options[$event_options['target']]['on_enter'][1]) && $state_options[$event_options['target']]['on_enter'][1] === 'on_enter_published') {
      $form_state['node']->status = 1;
    }
    else {
      $form_state['node']->status = 0;
    }

    $machine->history_entity_form_submit_build_entity($form, $form_state);
  }
}

/**
 * Guard condition callback
 *
 * @param string $event
 * @return bool
 */
function state_flow_guard_schedule($event) {
  if (module_exists('state_flow_schedule')) {
    return state_flow_schedule_guard_permission($event, 'schedule content workflow');
  }
}

/**
 * Determine whether the workflow should be skipped on a node
 *
 * @param unknown_type $node
 */
function state_flow_skip_workflow($node) {
  if (!isset($node->stateflow_skip_workflow)) {
    return FALSE;
  }
  return $node->stateflow_skip_workflow;
}

/**
 * Implements hook_state_flow_entity_machine_type_alter().
 */
// function state_flow_state_flow_entity_machine_type_alter(&$machine_type, $entity, $entity_type) {

//   // If the entity is a node. Use the state_flow_node plugin.
//   if ($entity_type === 'node') {
//     $machine_type = 'state_flow_node';
//   }
// }
