<?php

/**
 * Implemenation of hook_menu().
 */
function pub_sync_files_menu() {
  $items['admin/utilities/sync_files'] = array(
    'title' => 'Sync Files',
    'description' => 'Sync files from source to destination.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pub_sync_files_sync_form'),
    'access arguments' => array('use publisher utilities'),
  );

  return $items;
}

/**
 * Form builder for the sync files tool.
 */
function pub_sync_files_sync_form($form, &$form_state) {
  // Get existing values of Site form elements used during AJAX callbacks.
  $site_names = publisher_utilities_sites();
  $site_name = isset($form_state['values']['site_source']['site_name']) ? $form_state['values']['site_source']['site_name'] : '';
  $destinations = publisher_utilities_destinations($site_name, TRUE);

  // Remove the "releases" destination if it exists. This is the production
  // instance of a site, and we should never be overwriting the prod files.
  $releases = array_search('releases', $destinations);
  if ($releases !== FALSE) {
    unset($destinations[$releases]);
  }

  $form = array(
    '#attributes' => array(
      'id' => 'sync_files_form',
      'class' => array('clearfix'),
    ),
  );
  $form['title'] = array(
    '#markup' => '<h3>' . t('Sync Files.') . '</h3>',
  );

  $form['site_source'] = array(
    '#type' => 'fieldset',
    '#description' => t("Choose the source site which the files will be sync'd from."),
    '#collabsible' => FALSE,
    '#title' => 'Source: site',
    '#tree' => TRUE,
  );
  $form['site_source']['site_name'] = array(
    '#type' => 'select',
    '#options' => drupal_map_assoc($site_names),
    '#title' => t('Name'),
    '#required' => TRUE,
    '#ajax' => array(
      'event' => 'change',
      'callback' => '_pub_sync_files_sync_form_ajax_callback',
      'wrapper' => 'sync_files_form',
    ),
  );

  // The default description to be used for the destination form field.
  $form_destination_description = 'The files will be sync\'d on the selected cloud-based destination.';

  // Add the "local" destination if this is running on a local development
  // machine. This enables developers to copy the files down locally via the
  // GUI. Also, change the description of the destination form field to reflect
  // the option to sync locally.
  if (!empty($_ENV['AH_SITE_ENVIRONMENT']) && "local" === $_ENV['AH_SITE_ENVIRONMENT']) {
    $destinations[] = "local";
    $form_destination_description = 'The files will be sync\'d on the selected cloud-based (or local) destination.';
  }

  $form['destination'] = array(
    '#type' => 'fieldset',
    '#description' => t($form_destination_description),
    '#collabsible' => FALSE,
    '#title' => 'Destination',
    '#tree' => TRUE,
  );
  $form['destination']['instance'] = array(
    '#type' => 'select',
    '#options' => !empty($destinations) ? drupal_map_assoc($destinations) : array(),
    '#title' => t('Instance'),
    '#required' => TRUE,
    '#empty_option' => empty($site_name) ? t('- Disabled -') : t('- Select -'),
    '#states' => array(
      'enabled' => array(
        ':input[name="site_source[site_name]"]' => array('filled' => TRUE),
      ),
    ),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Sync Files'),
  );

  return $form;
}

/**
 * Submit function for the Sync Files Form.
 */
function pub_sync_files_sync_form_submit($form, $form_state) {
  _pub_sync_files_do_sync($form_state['values']);

  // Get the destination alias based on what instance and site the user has
  // selected.
  $destination_site_alias = _pub_utilities_get_site_alias($form_state['values']['destination']['instance'], $form_state['values']['site_source']['site_name']);

  // Clear all caches.
  $drush = realpath(variable_get('pub_utilities_drush_bin', ''));
  $cmd = $drush . ' ' . $destination_site_alias . ' cc all';
  _pub_utilities_exec($cmd);
}

/**
 * Sync function to sync files from source site to destination.
 */
function _pub_sync_files_do_sync($values) {
  $drush = realpath(variable_get('pub_utilities_drush_bin', ''));
  $site_name = $values['site_source']['site_name'];
  $source_site_alias = '@' . $site_name . '.prod';

  // Get the destination alias based on what instance and site the user has
  // selected.
  $destination_site_alias = _pub_utilities_get_site_alias($values['destination']['instance'], $site_name);

  // We can't drush rsync between two remotes.
  // First, rsync from source to the local machine running the command.
  $cmd = $drush . ' -y -v rsync ' . $source_site_alias . ':%files/ ' . _pub_sync_files_get_sync_dir($site_name);
  _pub_utilities_exec($cmd);

  // Next, rsync from the local machine to the destination.
  $cmd = $drush . ' -y -v rsync ' . _pub_sync_files_get_sync_dir($site_name) . ' ' . $destination_site_alias . ':%files/';
  _pub_utilities_exec($cmd);
}

/**
 * Callback function refreshes the sync files form.
 */
function _pub_sync_files_sync_form_ajax_callback($form, $form_state) {
  return $form;
}

/**
 * Helper function to get the sync files directory for the specified site.
 *
 * Helper function to get the sync files directory for the specified site. The
 * directory is created if it doesn't already exist.
 *
 * @param string $site_name
 *   The short name of the site.
 *
 * @return string
 *   The current working directory.
 */
function _pub_sync_files_get_sync_dir($site_name) {
  // Create the sync files directory in the private files directory.
  $path = _pub_utilities_get_private_files_path() . '/pub_files/' . $site_name . '/files/';
  return _pub_utilities_mkdir($path);
}
