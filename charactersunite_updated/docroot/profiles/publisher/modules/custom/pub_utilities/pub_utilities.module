<?php

define('PUB_UTILITIES_GITHUB_API_URL', 'https://api.github.com');

/**
 * Implemenation of hook_menu().
 */
function pub_utilities_menu() {
  $items['admin/utilities'] = array(
    'title' => 'Utilities',
    'page callback' => 'pub_utilities_list_page',
    'access arguments' => array('access administration pages'),
  );
  $items['admin/utilities/config'] = array(
    'title' => 'Configure Publisher Utilities',
    'description' => 'Configure the various settings associated with Publisher\'s utilities',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pub_utilities_admin_settings'),
    'file' => 'pub_utilities.admin.inc',
    'access arguments' => array('administer publisher utilities'),
    'weight' => -1,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function pub_utilities_permission() {
  return array(
    'administer publisher utilities' => array(
      'title' => t('administer publisher utilities'),
      'description' => t("Configure how Publisher's administrative utilities work."),
      'restrict access' => TRUE,
    ),
    'use publisher utilities' => array(
      'title' => t('use publisher utilities'),
      'description' => t('Publisher utilities can be used to release code and perform other server actions.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Return a list of publisher sites based upon the drush alias file.
 *
 * Return a list of publisher sites based on the existence of a drush alias
 * file in the sites/all/drush folder.
 *
 * @return array
 *   A list of sites.
 */
function publisher_utilities_sites() {
  $sites = array();

  $files = scandir('sites/all/drush/aliases');
  foreach ($files as $file) {
    if (strpos($file, '.aliases.drushrc.php') !== FALSE) {
      $parts = explode('.', $file);
      $sites[] = $parts[0];
    }
  }
  sort($sites);

  return $sites;
}

/**
 * Return the git repository destinations for a given site.
 *
 * Return the git repository destinations information for the given site as it
 * is defined in the sites aliases file.
 *
 * @param string $site_name
 *   The short name of the site in question.
 * @param bool $return_keys
 *   If TRUE only return the human-readible names of the destinations.
 *
 * @return array
 *   A list of git repository destinations.
 */
function publisher_utilities_destinations($site_name, $return_keys = FALSE) {
  $destinations = array();
  if (!empty($site_name)) {
    include 'sites/all/drush/aliases/' . $site_name . '.aliases.drushrc.php';
    $destinations = $aliases['prod']['#destinations'];
  }

  return $return_keys ? array_keys($destinations) : $destinations;
}

/**
 * Callback function that displays links to all utilities.
 */
function pub_utilities_list_page() {
  $item = menu_get_item();
  $content = system_admin_menu_block($item);

  return theme('admin_block_content', array('content' => $content));
}

/**
 * If debug mode is turned on and the devel module is enabled, print $var.
 *
 * @param mixed $var
 *   The variable or message to print.
 * @param string $label
 *   An optional label to display with the message.
 */
function pub_utilities_debug($var, $label = '') {
  if (module_exists('devel') && variable_get('pub_utilities_debug_mode', '0')) {
    dpm($var, $label);
  }
}

/**
 * Helper function for executing a command line command.
 *
 * @param string $cmd
 *   The command line command to run.
 * @param string $msg
 *   An error message to display if something goes wrong.
 * @param bool $die_on_error
 *   If TRUE, discontinue processing on an error.
 *
 * @return bool
 *   TRUE on success or FALSE on failure.
 */
function _pub_utilities_exec($cmd, $msg = '', $die_on_error = TRUE) {
  // If the command has "git" in it we take extra steps to ensure that it uses
  // the ssh key stored in the Publisher7 repo.
  $is_git_cmd = (strpos($cmd, 'git') !== FALSE);
  if ($is_git_cmd) {
    $git_ssh_wrapper = 'export GIT_SSH=' . $_SERVER['DOCUMENT_ROOT'] . '/../ssh/git_ssh_wrapper.sh';
    $cmd = $git_ssh_wrapper . ' && ' . $cmd;
  }

  $proxy = variable_get('pub_utilities_proxy', '');
  if ($proxy) {
    $cmd = 'export HTTPS_PROXY="' . $proxy . '" && export http_proxy="' . $proxy . '" &&' . $cmd;
  }

  exec($cmd . ' 2>&1', $output, $status);

  pub_utilities_debug($cmd);
  pub_utilities_debug('Status: ' . $status . ' | Output: ');
  pub_utilities_debug($output);

  /*
   * If this is a git command, and the output contains 'nothing to commit
   * (working directory clean)', don't make the script die.
   *
   * This condition occurs when the code we are mushing matches exactly with the
   * code that's in the HEAD branch of the repository we are pushing to.
   *
   * We don't want the script to die here because we want the other steps of the
   * build to complete. Also, an integration release (i.e. 7.0.7-dev) might
   * match the last branch that was built and tested in the destination
   * repository. In that case, we certainly want a new tag generated, even if it
   * points to the same code as another tag.
   */
  if ($is_git_cmd && strpos($output, 'nothing to commit (working directory clean)') !== FALSE) {
    $die_on_error = FALSE;
  }

  _pub_utilities_batch_error_check($status, $msg, $die_on_error);

  return $status == 0;
}

/**
 * Helper function for determining if a command line error occurred.
 *
 * Helper function for determining if a command line error occured. When an
 * error occurs the script exits.
 *
 * @param int $status
 *   The exit status of a command line command. If this is 0 then no error has
 *   occurred.
 * @param string $message
 *   The error message to display.
 * @param bool $die_on_error
 *   If TRUE, discontinue processing on an error.
 */
function _pub_utilities_batch_error_check($status, $message = '', $die_on_error = TRUE) {
  if ($status != 0) {
    $message = empty($message) ? t('An error occured.') : $message;
    if ($die_on_error) {
      $result = array('status' => FALSE, 'data' => $message);
      die(json_encode($result));
    }
  }
}

/**
 * Helper function for changing directory on the command line.
 *
 * Helper function for changing directory on the command line. If the directory
 * does not exist, it will be created.
 *
 * @param string $path
 *   The path of the directory to create and change to.
 *
 * @return string
 *   The current working directory.
 */
function _pub_utilities_chdir($path) {
  _pub_utilities_mkdir($path);
  chdir($path);

  pub_utilities_debug('cd ' . getcwd() . '(' . $path . ')');

  return $path;
}

/**
 * Helper function for creating a directory that doesn't already exist.
 *
 * @param string $path
 *   The path of the directory to create.
 *
 * @return string
 *   The supplied path.
 */
function _pub_utilities_mkdir($path) {
  if (!file_exists($path)) {
    mkdir($path, 0777, TRUE);
  }
  return $path;
}

/**
 * Helper function that returns the private files path.
 *
 * @return string
 *   Path to the private files directory.
 */
function _pub_utilities_get_private_files_path() {
  $files_private_path = variable_get('file_private_path', '');
  if (empty($files_private_path)) {
    _pub_utilities_batch_error_check(1, t('The private files path is not properly set.'));
  }

  // If the files path does not begin with a "/", prepend the document root.
  $files_private_path = strpos($files_private_path, '/') === 0 ? $files_private_path : $_SERVER['DOCUMENT_ROOT'] . '/' . $files_private_path;

  return $files_private_path;
}

/**
 * Helper function used to connect to the GitHub API.
 *
 * Helper function used to connect to the GitHub API. The JSON object returned
 * by the GitHub API is converted to an array before it is returned.
 *
 * @param string $url
 *   The path, relative to the base API path, to the desired API call.
 *
 * @param string $method
 *   The HTTP request method to use. Options are GET (default), POST, DELETE,
 *   HEAD, PUT or PATCH.
 *
 * @param mixed $data
 *   Extra data required by the api call. For POST requests this should be an
 *   associative array of post values.
 *
 * @return mixed
 *   A structured JSON object or FALSE
 */
function _pub_utilities_github_api_call($url, $method = 'GET', $data = NULL) {
  $content = FALSE;

  // Add a "per_page" to the URL so things dont get truncated.
  $url .= (stripos($url, '?') === FALSE ? "?" : "&") . "per_page=1000";

  $credentials = variable_get('github_credentials', '');

  if (empty($credentials)) {
    drupal_set_message(t('No GitHub login credentials are defined. Please contact a Publisher7 administraor.'), 'error');
  }

  // Connect to GitHub API using CURL and decode the JSON response.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, PUB_UTILITIES_GITHUB_API_URL . $url);
  curl_setopt($ch, CURLOPT_USERPWD, $credentials);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_HEADER, TRUE);
  curl_setopt($ch, CURLOPT_USERAGENT, 'Drupal (+http://drupal.org/)');
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);

  $proxy = variable_get('pub_utilities_proxy', '');
  if ($proxy) {
    curl_setopt($ch, CURLOPT_PROXY, $proxy);
  }

  switch ($method) {
    case 'POST':
      curl_setopt($ch, CURLOPT_POST, TRUE);
      curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
      break;

    default:
      curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);
      break;
  }

  $response = curl_exec($ch);
  $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  $info = curl_getinfo($ch);
  $header = substr($response, 0, $info['header_size']);
  $content = substr($response, -$info['download_content_length']);
  $content = json_decode($content);
  curl_close($ch);

  if ($http_code <= 0 || $http_code >= 400) {
    drupal_set_message(t('The GitHub API request failed or returned no results.', array('!url' => $url)), 'error', FALSE);
    pub_utilities_debug($response, 'response');
    return FALSE;
  }

  return $content;
}

/**
 * Helper function used to retrieve a list of forks from the GitHub API.
 *
 * Helper function used to retrieve a list of forks from the GitHub API. The
 * returned array is keyed by $key and contains the full repo object as it was
 * returned by the GitHub API.
 *
 * @param string $repo
 *   The name of the repository to check for forks.
 * @param bool $include_original
 *   If TRUE the original repository from which the forks were forked is
 *   included.
 * @param string $key
 *   The object key that contains the information that should be used as the
 *   array key in returned array.
 *
 * @return array
 *   A list of forks of the supplied repository.
 */
function _pub_utilities_github_get_forks($repo, $include_original = TRUE, $key = 'full_name') {
  $forks = array();
  $github_group_name = variable_get('pub_utilities_github_org_name', '');

  // First we get the main repository.
  if ($include_original) {
    $url = '/repos/' . $github_group_name . '/' . $repo;
    if ($result = _pub_utilities_github_api_call($url)) {
      $forks[$result->$key] = $result;
    }
  }

  // Get 2 pages worth of results.
  $urls = array(
    '/repos/' . $github_group_name . '/' . $repo . '/forks',
    '/repos/' . $github_group_name . '/' . $repo . '/forks?page=2',
  );
  foreach ($urls as $url) {
    if ($results = _pub_utilities_github_api_call($url)) {
      foreach ($results as $result) {
        $forks[$result->$key] = $result;
      }
    }
  }

  ksort($forks, SORT_STRING);

  // Pub7 Core members stay at the top.
  // New core members get to add themselves.
  $core_members = array(
    'NBCUOTS/Publisher7',
    'bleen/Publisher7',
    'ElijahLynn/Publisher7',
    'ericduran/Publisher7',
    'richburke-nbc/Publisher7',
    'msound/Publisher7',
    'breathingrock/Publisher7',
  );

  foreach ($core_members as $key) {
    $forks = array($key => $forks[$key]) + $forks;
  }

  return $forks;
}

/**
 * Helper function used to retrieve a list of refs from the GitHub API.
 *
 * Helper function used to retrieve a list of refs from the GitHub API. The
 * returned array is keyed by $key and contains the full ref object as it was
 * returned by the GitHub API.
 *
 * @param string $type
 *   Either "branches" or "tags".
 * @param string $user
 *   The name of the user who owns the repo in question.
 *   included.
 * @param string $repo
 *   The name of the repository to check for forks.
 *
 * @return array
 *   A list of refs.
 */
function _pub_utilities_github_get_refs($type, $user, $repo) {
  $refs = array();

  if (!empty($user) && !empty($repo)) {
    $url = '/repos/' . $user . '/' . $repo . '/' . $type;
    if ($results = _pub_utilities_github_api_call($url)) {
      foreach ($results as $result) {
        $refs[$result->name] = $result;
      }
    }
  }
  ksort($refs, SORT_STRING);

  return $refs;
}

/**
 * Create a github pull request.
 *
 * @param string $repository
 *   The repository containing code changes.
 * @param string $branch
 *   The branch where the code changes are implemented.
 * @param string $destination_branch
 *   The branch in which the code changes should be merged.
 *
 * @return mixed
 *   The JSON response provided by the GitHub API or FALSE.
 *
 * @see http://developer.github.com/v3/pulls/#create-a-pull-request
 */
function _pub_utilities_github_pull_request($repository, $branch, $destination_branch = 'transition-master') {
  global $user;
  $github_group_name = variable_get('pub_utilities_github_org_name', '');
  list($github_user, $github_repo) = explode('/', $repository);

  $url = '/repos/' . $github_group_name . '/' . $github_repo . '/pulls';

  $data = array(
    'title' => t('Pull request: @branch', array('@branch' => $branch)),
    'body' => t('@user has certified the "@branch" branch. cc @@github_user', array(
      '@user' => $user->name,
      '@branch' => $branch,
      '@github_user' => $github_user,
    )),
    'head' => $github_user . ':' . $branch,
    'base' => $destination_branch,
  );

  $response = _pub_utilities_github_api_call($url, 'POST', $data);
  if ($response) {
    drupal_set_message(t('A request to pull code from <strong>@repository (@branch)</strong> into <strong>@destination_repository (@destination_branch)</strong> been successfully created.', array(
      '@repository' => $repository,
      '@branch' => $branch,
      '@destination_repository' => $github_group_name . '/' . $github_repo,
      '@destination_branch' => $destination_branch,
    )));
  }

  return $response;
}

/**
 * Check if a tag exists in a git repository.
 *
 * Check if a tag exists in a git repository. This function assumes you are
 * working in the directory of your repository before calling the function.
 *
 * @param string $tag
 *   The tag we want to check
 *
 * @return bool
 *   TRUE on success or FALSE on failure.
 */
function _pub_utilities_tag_exists($tag) {
  $git = variable_get('pub_utilities_git_bin', '');
  $tag_exists = _pub_utilities_exec($git . ' show-ref --verify --quiet refs/tags/' . $tag, '', FALSE);
  return $tag_exists;
}

/**
 * Run post deploy commands.
 *
 * @param string $site_alias
 *   The alias of the site on which to run the commands.
 */
function _pub_utilities_post_deploy($site_alias) {
  $drush = realpath(variable_get('pub_utilities_drush_bin', ''));
  $cmd = $drush . ' ' . $site_alias . ' updb -y';
  _pub_utilities_exec($cmd);

  // Configure the environment. We only deploy the database to QA and local
  // environments from this script, so we always want to set the environment to
  // dev here.
  $cmd = $drush . ' ' . $site_alias . ' env dev -y';
  _pub_utilities_exec($cmd);

  // Clear all caches.
  $cmd = $drush . ' ' . $site_alias . ' cc all';
  _pub_utilities_exec($cmd);
}

/**
 * Get the desired site alias.
 *
 * @param string $instance
 *   The instance on which we want the site alias
 * @param string $site_name
 *   The site name for which we want the site alias
 *
 * @return string
 *   The site alias.
 */
function _pub_utilities_get_site_alias($instance, $site_name) {
  // If the instance is local, then we want the local alias for the given site,
  // which takes the format @site_name.local
  if ("local" === $instance) {
    return '@' . $site_name . '.local';
  }
  // Otherwise, we want the development alias for the given instance, which
  // takes the format @site_name.instance.dev
  else {
    return '@' . $site_name . '.' . $instance . '.dev';
  }
}
