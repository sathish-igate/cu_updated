<?php

/**
 * @file
 * The module file for the wp_report_server module.
 */

/**
 * Implements hook_entity_info().
 */
function wp_report_server_entity_info() {
  $info = array();
  $info['wp_site_report'] = array(
    'label' => t('WP Site Reports'),
    'base table' => 'wp_report_sites',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'site_name',
    ),
    'module' => 'wp_report_server',
    'uri callback' => 'entity_class_uri',
    'entity class' => 'SiteReportsEntity',
    'controller class' => 'EntityAPIController',
    'access arguments' => 'administer site configuration',
  );
  return $info;
}

/**
 * Implements hook_views_api().
 */
function wp_report_server_views_api() {
  return array(
    'api' => 3.0,
  );
}

/**
 * Implements hook_theme_registry_alter().
 */
function wp_report_server_theme_registry_alter(&$theme_registry) {
  $theme_registry['views_view_table__wp_site_reports_view'] = $theme_registry['views_view_table'];
  $theme_registry['views_view_table__wp_site_reports_view']['pattern'] = 'views_view_table__wp_site_reports_view';
  $theme_registry['views_view_table__wp_site_reports_view']['path'] = drupal_get_path('module', 'wp_report_server') . '/templates';
  $theme_registry['views_view_table__wp_site_reports_view']['template'] = 'views-view-table--wp-site-reports-view';
}

/**
 * Implements hook_menu().
 */
function wp_report_server_menu() {
  $items = array();

  // Create a path for the client to use when submitting a report.
  $items['report_api/wp_report'] = array(
    'page callback' => 'wp_report_server_add_report_api',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Create a path for the configuration form.
  $items['admin/config/system/wp_report_server'] = array(
    'title' => 'NBCUPress Reporting',
    'description' => 'Configuration settings for WP Reports Server',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pub_report_server_api_key_generator_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Adds the report to the DB.
 */
function wp_report_server_add_report_api() {
  $raw_data = $_POST;

  $site_name = isset($raw_data['site_name']) ? check_plain($raw_data['site_name']) : '';
  $site_fullname = isset($raw_data['site_fullname']) ? check_plain($raw_data['site_fullname']) : '';
  $api_key = isset($raw_data['api_key']) ? check_plain($raw_data['api_key']) : '';
  $api_version = isset($raw_data['api_version']) ? check_plain($raw_data['api_version']) : '';
  $wordpress_version = isset($raw_data['wordpress_version']) ? check_plain($raw_data['wordpress_version']) : '';
  $nbcupress_version = isset($raw_data['nbcupress_version']) ? check_plain($raw_data['nbcupress_version']) : '';
  $default_theme = isset($raw_data['default_theme']) ? check_plain($raw_data['default_theme']) : '';

  if (strlen($site_name) > 0 && strlen($api_key) > 0) {
    if ($api_key == _pub_report_server_generate_site_api_key($site_name)) {
      // Set the the last record field for previous report to 0
      $query = new EntityFieldQuery();
      $result = $query->entityCondition('entity_type', 'wp_site_report', '=')
        ->propertyCondition('last_report', '1', '=')
        ->propertyCondition('site_name', $site_name, '=')
        ->execute();

      $entities = entity_load('wp_site_report', array_keys($result['wp_site_report']));
      foreach ($entities as $k => $wp_site_report) {
        $wp_site_report->last_report = 0;
        $wp_site_report->save();
      }

      // Process the new entity data.
      $site_plugins = '';
      $site_plugins_versions = '';
      $site_plugins_count = '';
      if (isset($raw_data['site_plugins']) && is_array($raw_data['site_plugins'])) {
        $site_plugins = $raw_data['site_plugins'];
        $site_plugins_versions = _wp_report_server_get_plugin_versions($site_plugins);
        $site_plugins_count = count($site_plugins_versions);
      }

      $nbcupress_plugins_versions = '';
      $nbcupress_plugins_count = '';
      if (isset($raw_data['nbcupress_plugins']) && is_array($raw_data['nbcupress_plugins'])) {
        $nbcupress_plugins = $raw_data['nbcupress_plugins'];
        $nbcupress_plugins_versions = _wp_report_server_get_plugin_versions($nbcupress_plugins);
        $nbcupress_plugins_count = count($nbcupress_plugins_versions);
      }

      // Calculate the diff for site_plugins so that we can store it and use in
      // the views.
      reset($entities);

      $new_site_plugins_arr = $site_plugins_versions;
      $previous_site_plugins_arr = !(current($entities)->site_plugins) ? array() : unserialize(current($entities)->site_plugins);
      $site_plugin_versions_diff = wp_report_server_calculate_plugin_versions_diff($new_site_plugins_arr, $previous_site_plugins_arr);
      $last_report_diff = array('site_plugin_versions' => $site_plugin_versions_diff);

      // Calculate the diff for site_plugins so that we can store it and use in
      // the views.
      reset($entities);

      $new_nbcupress_plugins_arr = $nbcupress_plugins_versions;
      $previous_nbcupress_plugins_arr = !(current($entities)->nbcupress_plugins) ? array() : unserialize(current($entities)->nbcupress_plugins);
      $nbcupress_plugin_versions_diff = wp_report_server_calculate_plugin_versions_diff($new_nbcupress_plugins_arr, $previous_nbcupress_plugins_arr);
      $last_report_diff_nbcupress = array('nbcupress_plugin_versions' => $nbcupress_plugin_versions_diff);

      $input_data = array(
        'site_name' => $site_name,
        'site_fullname' => $site_fullname,
        'api_version' => $api_version,
        'wordpress_version' => $wordpress_version,
        'nbcupress_version' => $nbcupress_version,
        'site_plugins' => serialize($site_plugins_versions),
        'site_plugins_count' => $site_plugins_count,
        'nbcupress_plugins' => serialize($nbcupress_plugins_versions),
        'nbcupress_plugins_count' => $nbcupress_plugins_count,
        'last_report_diff' => serialize($last_report_diff),
        'last_report_diff_nbcupress' => serialize($last_report_diff_nbcupress),
        'default_theme' => $default_theme,
        'time_sent' => time(),
        'last_report' => 1,
      );

      // Save the entity.
      $entity = entity_create('wp_site_report', $input_data);
      $report_saved = $entity->save();
      if ($report_saved) {
        echo drupal_json_encode(
          array(
            "status" => "success",
            "message" => "Report saved. Data: " . serialize($input_data),
          )
        );
      }
      else {
        // Instead of returning a generic 400 response we use the more specific
        // 422 Unprocessable Entity code from RFC 4918. That way clients can
        // distinguish between general syntax errors in bad serializations (code
        // 400) and semantic errors in well-formed requests (code 422).
        throw new HttpException(422, drupal_json_encode(
            array(
              "status" => "error",
              "message" => "Unprocessable Entity: report not saved.",
            )
          )
        );
      }
    }
    else {
      echo drupal_json_encode(
        array(
          "status" => "error",
          "message" => "Invalid API key.",
        )
      );
    }
  }

  die();
}

/**
 * Calculate the diff between plugin versions.
 *
 * @param string $new
 *   The new version.
 *
 * @param string $previous
 *   The former version.
 *
 * @return array
 *   An array of plugins with their version information.
 */
function wp_report_server_calculate_plugin_versions_diff($new, $previous) {
  if (!$previous || !is_array($previous) || !$new || !is_array($new)) {
    return array(
      'new_site_plugins' => array(),
      'previous_versions' => array(),
      'deleted_site_plugins' => array(),
      'FAIL' => 'yes' . is_array($previous) . 'prev' . is_array($new),
    );
  }
  $diff1 = array_diff_assoc($new, $previous);
  $diff2 = array_diff_assoc($previous, $new);

  $new_site_plugins = array_diff_key($diff1, $previous);
  $previous_versions = array_intersect_key($previous, $diff1);
  $deleted_site_plugins = array_diff_key($diff2, $new);

  $result = array(
    'new_site_plugins' => $new_site_plugins,
    'previous_versions' => $previous_versions,
    'deleted_site_plugins' => $deleted_site_plugins,
  );
  return $result;
}

/**
 * Retrieves the plugin versions.
 *
 * @param array $plugins
 *   An array of plugins.
 *
 * @return array
 *   The version data for the supplied plugins.
 */
function _wp_report_server_get_plugin_versions($plugins) {
  $versions = array();
  foreach ($plugins as $key => $value) {
    $versions[_wp_report_server_string_to_filename($value['Name'])] = $value['Version'];
  }
  return $versions;
}

/**
 * Helper function to create filenames.
 */
function _wp_report_server_string_to_filename($word) {
  // Remove all non-alphanumeric chars at begin & end of string.
  $tmp = preg_replace('/^\W+|\W+$/', '', $word);

  // Compress internal whitespace and replace with.
  $tmp = preg_replace('/\s+/', '_', $tmp);

  // Remove all non-alphanumeric chars except _ and -.
  return strtolower(preg_replace('/\W-/', '', $tmp));
}

/**
 * Implements hook_services_resources().
 */
function wp_report_server_services_resources() {
  return array(
    'wp_report_services' => array(
      'index' => array(
        'help' => 'Retrieves a listing of sites',
        'file' => array('file' => 'module', 'module' => 'wp_report_server'),
        'callback' => '_wp_report_server_index',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'args' => array(
          array(
            'name' => 'page',
            'type' => 'int',
            'description' => '',
            'source' => array(
              'param' => 'page',
            ),
            'optional' => TRUE,
            'default value' => 0,
          ),
          array(
            'name' => 'parameters',
            'type' => 'array',
            'description' => '',
            'source' => 'param',
            'optional' => TRUE,
            'default value' => array(),
            'test' => 'ack',
          ),
        ),
      ),
    ),
  );
}


/**
 * Callback for retrieving all sites.
 */
function _wp_report_server_index($page, $parameters) {
  $sites = array();
  // Get the most recent row of each site.
  $res = db_query("SELECT b.* FROM (SELECT MAX(time_sent) AS max_time_sent FROM {wp_report_sites} GROUP BY site_name) a JOIN {wp_report_sites} b ON a.max_time_sent = b.time_sent ORDER BY b.time_sent DESC");
  foreach ($res as $site) {
    // Unserialize pre-db serialized data generically.
    foreach ($site as $key => $value) {
      $newvalue = unserialize($value);
      if ($newvalue) {
        $site->$key = $newvalue;
      }
    }
    $sites[] = $site;
  }
  return $sites;
}
