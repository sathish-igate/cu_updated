<?php

/**
 * @file
 * Tests for Dynamic Queue.
 */

/**
 * Class DynamicQueueTestCase.
 */
class DynamicQueueTestCase extends PublisherWebTestCase {
  /**
   * The admin user that will be created.
   */
  protected $admin;

  /**
   * Gets information about this test case.
   *
   * @return array
   *   Array containing the keys name, description and group.
   */
  public static function getInfo() {
    return array(
      'name' => 'Dynamic Queue',
      'description' => 'Verify Dynamic Queue',
      'group' => 'Dynamic Queue',
    );
  }

  /**
   * Sets up the test site.
   */
  public function setUp() {
    parent::setUp('dynamic_queue');
  }

  /**
   * Tests the Dynamic Queue functionality.
   */
  public function testDynamicQueue() {

    // Create and login the admin user.
    $this->admin = $this->drupalCreateUserWithRole('administrator');
    $this->drupalLogin($this->admin);

    // Create two movie nodes--one rated G, one rated R.
    $movie_title_g = $this->randomName(8);
    $synopsis = $this->randomName(20);
    $tid_g = 53;
    $show_settings = array(
      'title' => $movie_title_g,
      'type' => 'movie',
      'body' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $synopsis,
            'format' => 'wysiwyg_mini',
          ),
        )
      ),
      'field_tv_cover_media' => array(LANGUAGE_NONE => array(0 => array('fid' => 1, 'display' => 1))),
      'field_movie_rating' => array(LANGUAGE_NONE => array(0 => array('tid' => $tid_g))),
      'event' => 'to_published',
      'event_comment' => $this->randomString(20),
      'status' => 1,
    );
    $show = $this->drupalCreateNode($show_settings);
    $this->assert(!empty($show->nid), 'The Movie node has been created.');

    $movie_title_r = $this->randomName(8);
    $synopsis = $this->randomName(20);
    $tid_r = 56;
    $show_settings = array(
      'title' => $movie_title_r,
      'type' => 'movie',
      'body' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $synopsis,
            'format' => 'wysiwyg_mini,',
          ),
        ),
      ),
      'field_tv_cover_media' => array(LANGUAGE_NONE => array(0 => array('fid' => 1, 'display' => 1))),
      'field_movie_rating' => array(LANGUAGE_NONE => array(0 => array('tid' => $tid_r))),
      'event' => 'to_published',
      'event_comment' => $this->randomString(20),
      'status' => 1,
    );
    $show = $this->drupalCreateNode($show_settings);
    $this->assert(!empty($show->nid), 'The Movie node has been created.');

    // Create another movie node.
    $movie_title3 = $this->randomName(8);
    $show_settings['title'] = $movie_title3;

    // Create dynamic queue type.
    $label = $this->randomName(8);
    $type = strtolower($label);
    $edit = array(
      'label' => $label,
      'type' => $type,
      'entity_type' => 'node',
      'settings[taxonomy][fields][movie_rating][field_movie_rating]' => TRUE,
    );
    $this->drupalPost('admin/structure/dynamic-queue/add', $edit, t('Save'));
    $this->assertRaw($label, 'The dynamic queue type has been created.');

    // Create dynamic queue.
    $title = $this->randomName(8);
    $edit = array(
      'title' => $title,
      'settings[target_bundles][movie]' => 'movie',
      'settings[terms][field_movie_rating][]' => array($tid_g),
      'settings[sort]' => 'dynamic_queue_newest',
    );
    $this->drupalPost('admin/content/dynamic-queue/add/' . $type, $edit, t('Save Dynamic Queue'));
    $this->assertRaw($title, 'The dynamic queue has been created.');

    // Visit the dynamic queue page and check if the movie is displayed.
    $this->drupalGet('dynamic-queue/1');
    $this->assertRaw($movie_title_g, 'The dynamic queue render displays the movie.');
    $this->assertNoRaw($movie_title_r, 'The dynamic queue render does not include this movie.');

    // Create another dynamic queue.
    $title = $this->randomName(8);
    $edit = array(
      'title' => $title,
      'settings[target_bundles][movie]' => 'movie',
      'settings[sort]' => 'dynamic_queue_oldest',
      'settings[limit]' => '2',
    );
    $this->drupalPost('admin/content/dynamic-queue/add/' . $type, $edit, t('Save Dynamic Queue'));
    $this->assertRaw($title, 'The dynamic queue has been created.');

    // Visit the dynamic queue page and check if the limit works.
    // We created 3 movies, but set limit to 2. So the third movie should not be
    // displayed.
    $this->drupalGet('dynamic-queue/2');
    $this->assertRaw($movie_title_g, 'The dynamic queue limit works for the first movie.');
    $this->assertRaw($movie_title_r, 'The dynamic queue limit works for the second movie.');
    $this->assertNoRaw($movie_title3, 'The dynamic queue limit works for the third movie.');
  }
}
